module = "module" ident ";" varDeclaration { subroutineDecl } "begin" statSequence "end" ident ".".

digit = "0".."9".
letter = "A".."Z" | "a".."z" | "_".
character = ASCIIchar | "\n" | "\t" | "\"" | "\'" | "\\" | "\0".
char = "'" character "'".
string = '"' { character } '"'.
ident = letter { letter | digit }.
number = digit { digit }.
boolean = "true" | "false".
type = basetype | type "[" [ number ] "]".
basetype = "boolean" | "char" | "integer".
qualident = ident { "[" expression "]" }.

factOp = "*" | "/" | "&&".
termOp = "+" | "-" | "||".
relOp = "=" | "#" | "<" | "<=" | ">" | ">=".

factor = qualident | number | boolean | char | string | "(" expression ")" | subroutineCall | "!" factor.
term = factor { factOp factor }.
simpleexpr = ["+"|"-"] term { termOp term }.
expression = simpleexpr [ relOp simplexpr ].

assignment = qualident ":=" expression.
subroutineCall = ident "(" [ expression {"," expression} ] ")".
ifStatement = "if" "(" expression ")" "then" statSequence [ "else" statSequence ] "end".
whileStatement = "while" "(" expression ")" "do" statSequence "end".
returnStatement = "return" [ expression ].

statement = assignment | subroutineCall | ifStatement | whileStatement | returnStatement.
statSequence = [ statement { ";" statement } ].
varDeclaration = [ "var" varDeclSequence ";" ].
varDeclSequence = varDecl { ";" varDecl }.
varDecl = ident { "," ident } ":" type.

subroutineDecl = (procedureDecl | functionDecl) subroutineBody ident ";".
procedureDecl = "procedure" ident [ formalParam ] ";".
functionDecl = "function" ident [ formalParam ] ":" type ";".
formalParam = "(" [ varDeclSequence ] ")".
subroutineBody = varDeclaration "begin" statSequence "end".

comment = "//" {[^\n]} \n.
whitespace = { " " | \t | \n }.
